#ifndef _KEV_WINTER_HEADER_
#define _KEV_WINTER_HEADER_
#include <stdint.h>
#include <stdbool.h>

typedef struct kev_win_event
{
	int type;
	int keycode;
} kev_win_event;

typedef struct kev_win_event_list_item
{
	kev_win_event event;
	struct kev_win_event_list_item *next;
} kev_win_event_list_item;

enum EventType {
	KEYPRESS,
	KEYRELEASE
};

enum Keycode {
	KEYCODE_LEFTMOUSE = 0,
	KEYCODE_RIGHTMOUSE,
	KEYCODE_MIDDLEMOUSE,
	KEYCODE_ESCAPE,
	KEYCODE_1,
	KEYCODE_2,
	KEYCODE_3,
	KEYCODE_4,
	KEYCODE_5,
	KEYCODE_6,
	KEYCODE_7,
	KEYCODE_8,
	KEYCODE_9,
	KEYCODE_0,
	KEYCODE_MINUS,
	KEYCODE_EQUALS,
	KEYCODE_BACKSPACE,
	KEYCODE_TAB,
	KEYCODE_Q,
	KEYCODE_W,
	KEYCODE_E,
	KEYCODE_R,
	KEYCODE_T,
	KEYCODE_Y,
	KEYCODE_U,
	KEYCODE_I,
	KEYCODE_O,
	KEYCODE_P,
	KEYCODE_BRACKETLEFT,
	KEYCODE_BRACKETRIGHT,
	KEYCODE_ENTER,
	KEYCODE_CTRL,
	KEYCODE_A,
	KEYCODE_S,
	KEYCODE_D,
	KEYCODE_F,
	KEYCODE_G,
	KEYCODE_H,
	KEYCODE_J,
	KEYCODE_K,
	KEYCODE_L,
	KEYCODE_SEMICOLON,
	KEYCODE_APOSTROPHE,
	KEYCODE_SHIFT,
	KEYCODE_BACKSLASH,
	KEYCODE_Z,
	KEYCODE_X,
	KEYCODE_C,
	KEYCODE_V,
	KEYCODE_B,
	KEYCODE_N,
	KEYCODE_M,
	KEYCODE_COMMA,
	KEYCODE_FULLSTOP,
	KEYCODE_SLASH,
	KEYCODE_NUMPADMULTIPLY,
	KEYCODE_ALT,
	KEYCODE_SPACE,
	KEYCODE_CAPSLOCK,
	KEYCODE_F1,
	KEYCODE_F2,
	KEYCODE_F3,
	KEYCODE_F4,
	KEYCODE_F5,
	KEYCODE_F6,
	KEYCODE_F7,
	KEYCODE_F8,
	KEYCODE_F9,
	KEYCODE_F10,
	KEYCODE_NUMLOCK,
	KEYCODE_SCROLLLOCK,
	KEYCODE_NUMPAD7,
	KEYCODE_NUMPAD8,
	KEYCODE_NUMPAD9,
	KEYCODE_NUMPADMINUS,
	KEYCODE_NUMPAD4,
	KEYCODE_NUMPAD5,
	KEYCODE_NUMPAD6,
	KEYCODE_NUMPADPLUS,
	KEYCODE_NUMPAD1,
	KEYCODE_NUMPAD2,
	KEYCODE_NUMPAD3,
	KEYCODE_NUMPAD0,
	KEYCODE_NUMPADDECIMAL,
	KEYCODE_F11,
	KEYCODE_F12,
	KEYCODE_NUMPADENTER,
	KEYCODE_NUMPADDIVIDE,
	KEYCODE_UNUSED,
	KEYCODE_HOME,
	KEYCODE_UP,
	KEYCODE_PAGEUP,
	KEYCODE_LEFT,
	KEYCODE_RIGHT,
	KEYCODE_END,
	KEYCODE_DOWN,
	KEYCODE_PAGEDOWN,
	KEYCODE_INSERT,
	KEYCODE_DELETE,
	KEYCODE_PRINTSCREEN,
	KEYCODE_HASH,
	NUM_KEYCODES
};


static const int windows_virtual_keycodes[] = {
	KEYCODE_LEFTMOUSE,
	KEYCODE_RIGHTMOUSE,
	KEYCODE_UNUSED,
	KEYCODE_MIDDLEMOUSE,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_BACKSPACE,
	KEYCODE_TAB,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_ENTER,
	KEYCODE_UNUSED,
	KEYCODE_SHIFT,
	KEYCODE_CTRL,
	KEYCODE_ALT,
	KEYCODE_UNUSED,
	KEYCODE_CAPSLOCK,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_ESCAPE,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_SPACE,
	KEYCODE_PAGEUP,
	KEYCODE_PAGEDOWN,
	KEYCODE_END,
	KEYCODE_HOME,
	KEYCODE_LEFT,
	KEYCODE_UP,
	KEYCODE_RIGHT,
	KEYCODE_DOWN,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_PRINTSCREEN,
	KEYCODE_INSERT,
	KEYCODE_DELETE,
	KEYCODE_UNUSED,
	KEYCODE_0,
	KEYCODE_1,
	KEYCODE_2,
	KEYCODE_3,
	KEYCODE_4,
	KEYCODE_5,
	KEYCODE_6,
	KEYCODE_7,
	KEYCODE_8,
	KEYCODE_9,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_A,
	KEYCODE_B,
	KEYCODE_C,
	KEYCODE_D,
	KEYCODE_E,
	KEYCODE_F,
	KEYCODE_G,
	KEYCODE_H,
	KEYCODE_I,
	KEYCODE_J,
	KEYCODE_K,
	KEYCODE_L,
	KEYCODE_M,
	KEYCODE_N,
	KEYCODE_O,
	KEYCODE_P,
	KEYCODE_Q,
	KEYCODE_R,
	KEYCODE_S,
	KEYCODE_T,
	KEYCODE_U,
	KEYCODE_V,
	KEYCODE_W,
	KEYCODE_X,
	KEYCODE_Y,
	KEYCODE_Z,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_NUMPAD0,
	KEYCODE_NUMPAD1,
	KEYCODE_NUMPAD2,
	KEYCODE_NUMPAD3,
	KEYCODE_NUMPAD4,
	KEYCODE_NUMPAD5,
	KEYCODE_NUMPAD6,
	KEYCODE_NUMPAD7,
	KEYCODE_NUMPAD8,
	KEYCODE_NUMPAD9,
	KEYCODE_NUMPADMULTIPLY,
	KEYCODE_NUMPADPLUS,
	KEYCODE_UNUSED,
	KEYCODE_NUMPADMINUS,
	KEYCODE_UNUSED,
	KEYCODE_NUMPADDIVIDE,
	KEYCODE_F1,
	KEYCODE_F2,
	KEYCODE_F3,
	KEYCODE_F4,
	KEYCODE_F5,
	KEYCODE_F6,
	KEYCODE_F7,
	KEYCODE_F8,
	KEYCODE_F9,
	KEYCODE_F10,
	KEYCODE_F11,
	KEYCODE_F12,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_NUMLOCK,
	KEYCODE_SCROLLLOCK,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_SHIFT,
	KEYCODE_SHIFT,
	KEYCODE_CTRL,
	KEYCODE_CTRL,
	KEYCODE_ALT,
	KEYCODE_ALT,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED
};

static const int linux_keycodes_map[] = {
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_1,
	KEYCODE_2,
	KEYCODE_3,
	KEYCODE_4,
	KEYCODE_5,
	KEYCODE_6,
	KEYCODE_7,
	KEYCODE_8,
	KEYCODE_9,
	KEYCODE_0,
	KEYCODE_MINUS,
	KEYCODE_EQUALS,
	KEYCODE_BACKSPACE,
	KEYCODE_ESCAPE,
	KEYCODE_Q,
	KEYCODE_W,
	KEYCODE_E,
	KEYCODE_R,
	KEYCODE_T,
	KEYCODE_Y,
	KEYCODE_U,
	KEYCODE_I,
	KEYCODE_O,
	KEYCODE_P,
	KEYCODE_BRACKETLEFT,
	KEYCODE_BRACKETRIGHT,
	KEYCODE_ENTER,
	KEYCODE_UNUSED,
	KEYCODE_A,
	KEYCODE_S,
	KEYCODE_D,
	KEYCODE_F,
	KEYCODE_G,
	KEYCODE_H,
	KEYCODE_J,
	KEYCODE_K,
	KEYCODE_L,
	KEYCODE_SEMICOLON,
	KEYCODE_APOSTROPHE,
	KEYCODE_UNUSED,
	KEYCODE_SHIFT,
	KEYCODE_HASH,
	KEYCODE_Z,
	KEYCODE_X,
	KEYCODE_C,
	KEYCODE_V,
	KEYCODE_B,
	KEYCODE_N,
	KEYCODE_M,
	KEYCODE_COMMA,
	KEYCODE_FULLSTOP,
	KEYCODE_SLASH,
	KEYCODE_SHIFT,	
	KEYCODE_TAB,
	KEYCODE_NUMPADMULTIPLY,
	KEYCODE_ALT,
	KEYCODE_SPACE,
	KEYCODE_CAPSLOCK,
	KEYCODE_F1,
	KEYCODE_F2,
	KEYCODE_F3,
	KEYCODE_F4,
	KEYCODE_F5,
	KEYCODE_F6,
	KEYCODE_F7,
	KEYCODE_F8,
	KEYCODE_F9,
	KEYCODE_F10,
	KEYCODE_NUMLOCK,
	KEYCODE_SCROLLLOCK,
	KEYCODE_NUMPAD7,
	KEYCODE_NUMPAD8,
	KEYCODE_NUMPAD9,
	KEYCODE_NUMPADMINUS,
	KEYCODE_NUMPAD4,
	KEYCODE_NUMPAD5,
	KEYCODE_NUMPAD6,
	KEYCODE_NUMPADPLUS,
	KEYCODE_NUMPAD1,
	KEYCODE_NUMPAD2,
	KEYCODE_NUMPAD3,
	KEYCODE_NUMPAD0,
	KEYCODE_NUMPADDECIMAL,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_F11,
	KEYCODE_F12,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_NUMPADENTER,
	KEYCODE_CTRL,
	KEYCODE_NUMPADDIVIDE,
	KEYCODE_UNUSED,
	KEYCODE_ALT,
	KEYCODE_UNUSED,
	KEYCODE_HOME,
	KEYCODE_UP,
	KEYCODE_PAGEUP,
	KEYCODE_LEFT,
	KEYCODE_RIGHT,
	KEYCODE_END,
	KEYCODE_DOWN,
	KEYCODE_PAGEDOWN,
	KEYCODE_INSERT,
	KEYCODE_DELETE,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED,
	KEYCODE_UNUSED
};



#ifdef _WIN32
#include <windows.h>
#endif

#ifdef __linux__

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>


#endif

typedef struct kev_win{
	int width;
	int height;
	int scale;
	char *title;
	uint32_t *buffer;
	int64_t last_frame_ns;
	kev_win_event_list_item *event_list_start;
#ifdef _WIN32
	HWND handle;
	LARGE_INTEGER performance_freq;
#endif
#ifdef __linux__

	Display *dis;
	int screen;
	Window x_win;
	uint32_t *scaled_buffer;
	GC gc;
	XImage *buff_ximage;

#endif
} kev_win;

unsigned int rgb(unsigned char r, unsigned char g, unsigned char b);

kev_win_event_list_item *kev_win_queue_new_event(int type, int keycode);

void kev_win_update_events(kev_win *win);
int kev_win_poll_event(kev_win *win, kev_win_event *event);
void kev_win_init(kev_win *win);

bool kev_win_is_pressed(int keycode);

#endif